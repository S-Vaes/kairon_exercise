import ccxt
import concurrent.futures
from typing import Optional
import kairon_exercise.constants


# Initialize the KuCoin exchange
kucoin = ccxt.kucoin()
markets_to_monitor: list[str] = [
    "BTC/USDT",
    "ETH/USDT",
    "XRP/USDT",
    "LINK/USDC",
    "ADA/USDT",
    "DOT/USDT",
    "ALGO/USDT",
    "XTZ/USDT",
]


def fetch_order_book(exchange: ccxt.Exchange, symbol: str) -> dict:
    return exchange.fetch_order_book(symbol)


def calculate_spread(bid: float, ask: float) -> float | None:
    if bid and ask:
        mid_price = (ask + bid) / 2
        return ((ask - bid) / mid_price) * 100
    return None


def calculate_slippage(
    bids: list[tuple[float, float]], asks: list[tuple[float, float]], mid_price: float, percentage_range: float
) -> tuple[float | None, float | None]:
    upper_limit = mid_price * (1 + percentage_range)
    lower_limit = mid_price * (1 - percentage_range)

    bid_price_for_slippage = next((price for price, _ in bids if price >= lower_limit), None)
    ask_price_for_slippage = next((price for price, _ in asks if price <= upper_limit), None)

    bid_slippage = ((mid_price - bid_price_for_slippage) / mid_price) * 100 if bid_price_for_slippage else None
    ask_slippage = ((ask_price_for_slippage - mid_price) / mid_price) * 100 if ask_price_for_slippage else None

    return bid_slippage, ask_slippage


def fetch_market_data(
    exchange: ccxt.Exchange, symbol: str, percentage_range: float
) -> tuple[str, float | None, float | None, float | None]:
    orderbook = fetch_order_book(exchange, symbol)
    bids, asks = orderbook["bids"], orderbook["asks"]

    bid = bids[0][0] if bids else None
    ask = asks[0][0] if asks else None
    spread_percentage = calculate_spread(bid, ask)

    mid_price = (ask + bid) / 2 if (bid and ask) else None
    bid_slippage, ask_slippage = (
        calculate_slippage(bids, asks, mid_price, percentage_range) if mid_price else (None, None)
    )

    return symbol, spread_percentage, bid_slippage, ask_slippage


def fetch_all_market_data(
    exchange: ccxt.Exchange, markets: list[str], percentage_range: float
) -> list[tuple[str, float | None, float | None, float | None]]:
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = [executor.submit(fetch_market_data, exchange, market, percentage_range) for market in markets]
    return [future.result() for future in concurrent.futures.as_completed(futures)]


def start() -> None:
    print("Starting")
    market_data = fetch_all_market_data(kucoin, markets_to_monitor, 0.02)

    for data in market_data:
        print(f"Market: {data[0]}, Spread: {data[1]}%, Bid Slippage: {data[2]}%, Ask Slippage: {data[3]}%")


if __name__ == "__main__":
    start()
